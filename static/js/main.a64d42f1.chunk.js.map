{"version":3,"sources":["components/Table/Table.jsx","components/Loader.jsx","components/SearchFilter.jsx","constants.js","components/SizeSelector.jsx","components/UserInfo.jsx","components/AddUserForm.jsx","compareValues.js","App.js","serviceWorker.js","index.js"],"names":["Table","data","handleSort","sortType","sortRow","handleUserShow","striped","bordered","hover","variant","size","className","onClick","map","i","key","id","Math","random","firstName","lastName","email","phone","defaultProps","role","SearchFilter","handleSearchOnClick","useState","searchValue","setSeachValue","InputGroup","FormControl","placeholder","aria-label","aria-describedby","defaultValue","onChange","value","target","Append","Button","LONG_REQ","SHORT_REQ","SELECT_OPT","label","SizeSelector","handleSelectOnClick","selectedSize","setSelectSize","Container","Row","Col","Form","Group","Label","Control","as","UserInfo","choisedUser","Card","bg","style","width","Body","Text","description","rows","address","streetAddress","city","state","zip","AddUserForm","showUserAddFormToggle","handleAddNewUser","formFields","setFormFields","formErrors","setFormErrors","emailRegex","RegExp","phoneRegex","idRegex","isFormReady","Object","values","every","length","changeHandler","name","errors","test","prevState","border","borderRadius","padding","background","noValidate","onSubmit","event","preventDefault","stopPropagation","controlId","required","initialvalue","type","e","Feedback","disabled","compareValues","order","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","App","isLoading","isSizeSelected","isUserAddStart","searchQuery","currentPage","concat","sort","setState","fetchData","handlePageClick","selected","dataPageFilter","reduce","p","c","push","dataSearchFilter","filter","item","query","toString","toLowerCase","includes","user","Number","unshift","fetch","then","res","json","catch","rej","Error","this","searchAppliedData","pageCount","ceil","pagingAppliedData","Loader","lg","md","previousLabel","nextLabel","breakLabel","breakClassName","forcePage","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.a64d42f1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table as BootstrapTable } from 'react-bootstrap';\nimport './table.css';\n\nconst Table = ( {data, handleSort, sortType, sortRow, handleUserShow} ) => {\n\n    return (\n        <BootstrapTable striped bordered hover variant=\"dark\" size=\"sm\">\n            <thead>\n                <tr>\n                    <th\n                        className={sortRow === 'id' ? `sorting_${sortType}` : ''} \n                        onClick={()=>{handleSort('id')}}> Id\n                    </th>\n                    <th \n                        className={sortRow === 'firstName' ? `sorting_${sortType}` : ''}\n                        onClick={()=>{handleSort('firstName')}}>First Name\n                    </th>\n                    <th \n                        className={sortRow === 'lastName' ? `sorting_${sortType}` : ''} \n                        onClick={()=>{handleSort('lastName')}}>Last Name\n                    </th>\n                    <th \n                        className={sortRow === 'email' ? `sorting_${sortType}` : ''} \n                        onClick={()=>{handleSort('email')}}>Email\n                    </th>\n                    <th \n                        className={sortRow === 'phone' ? `sorting_${sortType}` : ''}  \n                        onClick={()=>{handleSort('phone')}}>Phone\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {data.map(i => (\n                    <tr key={i.id + Math.random()} onClick={()=>{handleUserShow(i)}}>\n                        <td>{i.id}</td>\n                        <td>{i.firstName}</td>\n                        <td>{i.lastName}</td>\n                        <td>{i.email}</td>\n                        <td>{i.phone}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </BootstrapTable>\n    );\n}\n\nTable.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number,\n            firstName: PropTypes.string,\n            lastName: PropTypes.string,\n            email: PropTypes.string,\n            phone: PropTypes.string\n        }).isRequired\n    ),\n    handleUserShow:PropTypes.func,\n    handleSort: PropTypes.func,\n    sortType: PropTypes.string,\n    sortRow: PropTypes.string\n}\n\nTable.defaultProps = {\n    handleUserShow: () => {},\n    handleSort: () => {},\n    sortType: '',\n    sortRow: '',\n}\n\nexport default Table;","import React from 'react';\n\nexport default () => {\n    return (\n        <div className=\"text-center\">\n            <div className=\"spinner-grow text-success\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n    );\n};","import React, { useState }from 'react';\nimport PropTypes from 'prop-types';\nimport {FormControl, Button, InputGroup} from 'react-bootstrap';\n\n\nconst SearchFilter = ({ handleSearchOnClick}) => {\n    const [searchValue, setSeachValue] = useState('');\n    \n    const handleSearchOnChange = ({target: {value}}) => {\n        setSeachValue(value);\n    }\n    return(\n        <>\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    placeholder=\"Поиск по таблице\"\n                    aria-label=\"Поиск по таблице\"\n                    aria-describedby=\"search\"\n                    defaultValue={searchValue}\n                    onChange={handleSearchOnChange}\n                />\n                <InputGroup.Append  >\n                    <Button onClick={()=> { handleSearchOnClick(searchValue) } } variant=\"outline-secondary\">Поиск</Button>\n                </InputGroup.Append>\n            </InputGroup>\n        </>\n    );\n}\n\nSearchFilter.propTypes = {\n    handleSearchOnClick: PropTypes.func,\n}\n\nSearchFilter.defaultProps = {\n    handleSearchOnClick: () => {},\n}\n\nexport default SearchFilter;","const LONG_REQ = 'https://cors-anywhere.herokuapp.com/http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\nconst SHORT_REQ = 'https://cors-anywhere.herokuapp.com/http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\nconst PAGE_SIZE = 50;\nconst SELECT_OPT = [\n    {\n        value: 'short',\n        label: 'Короткий вариант (32 значения)'\n    },\n    {\n        value: 'long',\n        label: 'Длинный вариант (1000 значений)'\n    }\n];\n\nexport {\n    LONG_REQ,\n    SHORT_REQ,\n    SELECT_OPT,\n    PAGE_SIZE,\n}\n","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport { SELECT_OPT } from '../constants';\nimport { Form, Row, Col, Container, Button } from 'react-bootstrap';\n\nconst SizeSelector = ({ handleSelectOnClick}) => {\n\n    const [selectedSize, setSelectSize] = useState('short');\n\n    const handleSelectOnChange = ({target: {value}}) => {\n        setSelectSize(value);\n    }\n\n    return (\n        <Container>   \n            <Row>\n                <Col className={'col-md-auto mx-auto'}>\n                    <Form className=\"text-center\">\n                        <Form.Group>\n                            <Form.Label>Выберите объем данных:</Form.Label>\n                            <Form.Control className=\"mx-auto\" size=\"sm\" onChange={handleSelectOnChange} defaultValue={selectedSize} as=\"select\" >\n                                {SELECT_OPT.map(({value, label} ,i ) =>\n                                    <option key={i} value={value}>{label}</option>\n                                )}\n                            </Form.Control>\n                        </Form.Group>\n                        <Button onClick={()=> { handleSelectOnClick(selectedSize) }} variant=\"success\">Загрузить!</Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container> \n    );\n};\n\nSizeSelector.propTypes = {\n    handleSelectOnClick: PropTypes.func,\n}\n  \nSizeSelector.defaultProps = {\n    handleSelectOnClick: () => {},\n}\n\nexport default SizeSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Card, Form} from 'react-bootstrap';\n \nconst UserInfo = ({choisedUser = []}) => {\n    return(\n        <>\n            <Card\n                bg={'light'}\n                key={'idx'}\n                style={{ width: '24rem' }}\n                className=\"mb-2 mx-auto\"\n            >\n                <Card.Body>\n                    <Card.Text>\n                        Выбран пользователь <b>{`${choisedUser.firstName} ${choisedUser.lastName}`}</b><br/>\n                        Описание:\n                        <Form.Control defaultValue={choisedUser.description} as=\"textarea\" rows=\"3\" />\n                        Адрес проживания:<b>{choisedUser.address.streetAddress}</b><br/>\n                        Город:<b>{choisedUser.address.city}</b><br/>\n                        Провинция/штат: <b>{choisedUser.address.state}</b><br/>\n                        Индекс: <b>{choisedUser.address.zip}</b>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nUserInfo.propTypes = {\n        choisedUser: PropTypes.shape({\n            id: PropTypes.number,\n            firstName: PropTypes.string,\n            lastName: PropTypes.string,\n            phone: PropTypes.string,\n            email: PropTypes.string,\n            description: PropTypes.string,\n            address: PropTypes.objectOf(PropTypes.string),\n    }).isRequired,\n}\n  \nUserInfo.defaultProps = { }\n\nexport default UserInfo;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Row,  Col, Form, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst AddUserForm = ({ showUserAddFormToggle, handleAddNewUser }) => {\n\n    const [formFields, setFormFields] = useState({\n        id: '',\n        firstName: '',\n        lastName: '',\n        phone: '',\n        email: ''\n    });\n\n    const [formErrors, setFormErrors] = useState({\n        id: '',\n        firstName: '',\n        lastName: '',\n        phone: '',\n        email: ''\n    });\n\n    // template looks * @ *\n    const emailRegex = RegExp(\n        /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n    );\n    // 0-9 or starting with + , from 5-15 digital symbols\n    const phoneRegex = RegExp(\n        /^(([0-9]|\\+)[- ]?)?(\\(?\\d{3,4}\\)?[- ]?)?[\\d\\- ]{5,15}$/\n    );\n    // only digits\n    const idRegex = RegExp(\n        /^\\d+$/\n    );\n\n    const isFormReady = Object.values(formFields).every(i => i.length > 1) && Object.values(formErrors).every(i => i.length < 1);\n\n    const handleSubmit = (event) => {\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(isFormReady){\n\n            handleAddNewUser(formFields);\n        }\n\n    };\n\n    const changeHandler = ({target}) => {\n        const {name, value} = target;\n    \n        let errors = { ...formErrors };\n    \n        switch (name) {\n            case \"firstName\":\n                errors.firstName = value.length <= 1 ? \"Необходимо минимум 2 символа\" : \"\";\n                break;\n            case \"lastName\":\n                errors.lastName =  value.length <= 1 ? \"Необходимо минимум 2 символа\" : \"\";\n                break;\n            case \"email\":\n                errors.email = emailRegex.test(value) ? \"\" : \"Email должен быть вида: '* @ *'\";\n                break;\n            case \"phone\":\n                errors.phone = phoneRegex.test(value)  ? \"\" : \"Необходимо минимум 5 символов вида: 0-9 +\";\n                 break;\n            case \"id\":\n                errors.id = idRegex.test(value)  ?  \"\"  : \"Id должен состоять из цифр\";\n                break;\n            default:\n                break;\n          }\n\n          setFormErrors(errors);\n\n          setFormFields(prevState => ({\n            ...prevState,\n            [name] : value\n          }));\n\n    }\n              \n    return (\n        <Container>   \n            <Row>\n                <Col className=\"col-md-auto mx-auto\">\n                    <Form \n                        style={{ border:'3px solid #f1f1f1', borderRadius: '5px', padding: '15px', background: '#fff' }} \n                        noValidate \n                        onSubmit={handleSubmit}\n                    >\n                        <Form.Row>\n                            {/* Name */}\n                            <Form.Group className=\"mx-3\" controlId=\"formGroupName\">\n                                <Form.Label>Имя</Form.Label>\n                                <Form.Control \n                                    required\n                                    initialvalue={formFields.firstName}\n                                    name=\"firstName\"\n                                    className={formErrors.firstName ? \" is-invalid\" : \"\"}\n                                    type=\"text\" \n                                    placeholder=\"Введите имя\" \n                                    onChange={(e) => { changeHandler(e) }}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {formErrors.firstName}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            {/* Surname */}\n                            <Form.Group className=\"mx-3\" controlId=\"formGroupLastname\">\n                                <Form.Label>Фамилия</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"text\"\n                                    name=\"lastName\"\n                                    className={formErrors.lastName ? \" is-invalid\" : \"\"}\n                                    placeholder=\"Введите фамилию\" \n                                    onChange={(e) => { changeHandler(e) }}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {formErrors.lastName}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            {/* Id */}\n                            <Form.Group className=\"mx-3\" controlId=\"formGroupId\">\n                                <Form.Label>Id</Form.Label>\n                                <Form.Control \n                                    required\n                                    name=\"id\"\n                                    className={formErrors.id ? \" is-invalid\" : \"\"}\n                                    type=\"text\" \n                                    placeholder=\"Введите Id\"\n                                    onChange={(e) => { changeHandler(e) }}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {formErrors.id}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        {/* Email */}\n                        <Form.Row>\n                            <Form.Group className=\"mx-3\" controlId=\"formGroupEmail\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control\n                                    required\n                                    name=\"email\"\n                                    className={formErrors.email ? \" is-invalid\" : \"\"}\n                                    type=\"email\" \n                                    placeholder=\"Введите email\"\n                                    onChange={(e) => { changeHandler(e) }}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {formErrors.email}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            {/* Phone */}\n                            <Form.Group className=\"mx-3\" controlId=\"formGroupPhone\">\n                                <Form.Label>Телефон</Form.Label>\n                                <Form.Control\n                                    required\n                                    name=\"phone\"\n                                    className={formErrors.phone ? \" is-invalid\" : \"\"}\n                                    type=\"text\" \n                                    placeholder=\"Введите телефон\"\n                                    onChange={(e) => { changeHandler(e) }}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {formErrors.phone}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row className=\"text-center\">\n                            <Button \n                                variant=\"success\" \n                                className=\"mx-3\" \n                                type=\"submit\"\n                                disabled={!isFormReady}\n                            >\n                                Сохранить пользователя\n                            </Button>\n                            <Button onClick={() => { showUserAddFormToggle() }} variant=\"primary\">Отмена</Button>\n                        </Form.Row>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>  \n    );\n}\n\nAddUserForm.propTypes = {\n    showUserAddFormToggle:PropTypes.func,\n    handleSort: PropTypes.func,\n}\n\nAddUserForm.defaultProps = {\n    showUserAddFormToggle: () => {},\n    handleAddNewUser: () => {},\n}\n\nexport default AddUserForm;","// higher order function for sorting\n\nexport default function compareValues(key, order = 'asc') {\n    return function innerSort(a, b) {\n      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n        // property doesn't exist on either object\n        return 0;\n      }\n  \n      const varA = (typeof a[key] === 'string')\n        ? a[key].toUpperCase() : a[key];\n      const varB = (typeof b[key] === 'string')\n        ? b[key].toUpperCase() : b[key];\n  \n      let comparison = 0;\n      if (varA > varB) {\n        comparison = 1;\n      } else if (varA < varB) {\n        comparison = -1;\n      }\n      return (\n        (order === 'desc') ? (comparison * -1) : comparison\n      );\n    };\n  }","import React, {Component} from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Table from './components/Table/Table';\nimport Loader from './components/Loader';\nimport SearchFilter from './components/SearchFilter';\nimport SizeSelector from './components/SizeSelector';\nimport UserInfo from './components/UserInfo';\nimport AddUserForm from './components/AddUserForm';\n\n//sort high order function\nimport compareValues from './compareValues';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\n\nimport { LONG_REQ, SHORT_REQ, PAGE_SIZE } from './constants.js';\n\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    isSizeSelected: false,\n    isUserAddStart: false,\n    choisedUser: null,\n    searchQuery: '',\n    sortType: 'disabled',\n    sortRow: '',\n    currentPage: 0,\n    data: [],\n  };\n  \n  async fetchData (searchQuery) {\n\n    fetch(searchQuery)\n    .then(res => res.json())\n    .then(json =>  {\n      const data = json;\n      this.setState({data: data, isLoading: false});\n    })\n    .catch(rej => {\n        throw new Error(`Error - ${rej}`);\n    })\n\n  }\n\n  handleSort = (sortRow) => {\n    // make copy data\n    const data = this.state.data.concat();\n    const lastSortRow = this.state.sortRow.concat();\n    let sortType = '';\n    \n    // sort should start with 'asc' for new row\n    if(lastSortRow !== sortRow) {\n      sortType = 'asc';\n    }else {\n      sortType = this.state.sortType ===  'asc' ? 'desc' : 'asc';\n    }\n    // use external function for sorting\n    data.sort(compareValues(sortRow, sortType));\n\n    this.setState({data, sortType, sortRow});\n      \n  }\n\n  handleSelectOnClick = (value, e) => {\n    this.setState({isSizeSelected: true, isLoading: true});\n\n    switch(value){\n      case 'short': \n        this.fetchData(SHORT_REQ);\n        break;\n      case 'long':\n        this.fetchData(LONG_REQ);\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleSearchOnClick = (value) => {\n    this.setState({ searchQuery: value, currentPage: 0});\n  }\n\n  handleUserShow = (choisedUser) => {\n    this.setState({ choisedUser });\n  }\n\n  handlePageClick = ({ selected }) => {\n    this.setState({currentPage: selected});\n  }\n  // separate data to small arrays for paging (1 array for page)\n  dataPageFilter = (data, size) => {\n\n    const newData = data.reduce((p,c)=>{\n      if(p[p.length-1].length === size){\n        p.push([]);\n      }\n      \n      p[p.length-1].push(c);\n      return p;\n    }, [[]]);\n\n    return newData;\n \n  }\n\n  dataSearchFilter = (data) =>{\n\n    const { searchQuery } = this.state;\n\n    if(searchQuery){\n\n      const filteredData = data.filter((item) => {\n        let query = searchQuery.toString().toLowerCase();\n\n        return (\n         item.id.toString().includes(query) ||\n         item.firstName.toLowerCase().includes(query) ||\n         item.lastName.toLowerCase().includes(query) ||\n         item.phone.toLowerCase().includes(query) ||\n         item.email.toLowerCase().includes(query) );\n        \n      });\n\n      return filteredData;\n    }else{\n      return data;\n    }\n  }\n\n  showUserAddFormToggle = () => {\n    this.setState(({isUserAddStart}) => ({isUserAddStart: !isUserAddStart}));\n  }\n\n  handleAddNewUser = (user) => {\n\n    const data = this.state.data.concat();\n    user.id = Number(user.id);\n    user.description = user.description || '';\n    \n    if(!user.address){\n      user.address = {\n        streetAddress: '',\n        city: '',\n        state: '',\n        zip: ''\n      }\n    };\n    data.unshift(user);\n    this.setState({data: data, isUserAddStart: false});\n  }\n\n  render(){\n    const { \n            isSizeSelected, \n            isLoading, \n            data = [], \n            sortType, \n            sortRow, \n            choisedUser,\n            currentPage,\n            isUserAddStart,\n          } = this.state;\n\n    \n    // apply search\n    const searchAppliedData = this.dataSearchFilter(data);\n    \n    const pageCount = Math.ceil(searchAppliedData.length / PAGE_SIZE);\n\n    // apply paging\n    const pagingAppliedData = this.dataPageFilter(searchAppliedData, PAGE_SIZE)[currentPage];\n\n    // Show size selector if (isSizeSelected === false).\n    if(!isSizeSelected){\n      return (\n        <SizeSelector handleSelectOnClick={this.handleSelectOnClick} />\n      );\n    }\n\n    // Show add user Form if (isUserAddStart === true).\n    if(isUserAddStart){\n      return ( \n        <AddUserForm showUserAddFormToggle={this.showUserAddFormToggle} handleAddNewUser={this.handleAddNewUser} />\n      );\n    }\n    // Show Table with paging and \"User Info\" block.\n    return (\n      <Container>\n        <Row>\n            {\n              isLoading ? \n                <Col>\n                  <Loader/> \n                </Col> \n              :\n                <>\n                  <Col lg={6} md={8} className=\"mb-3\">\n                    <SearchFilter handleSearchOnClick={this.handleSearchOnClick} />\n                  </Col>\n                  <Col lg={6} md={4} className=\"text-center mb-3\">\n                    <Button variant=\"info\" onClick={ ()=> { this.showUserAddFormToggle() }}>Добавить пользователя</Button>\n                  </Col>\n                  <Col lg={12} md={12}>\n                    <Table \n                      data={pagingAppliedData} \n                      sortType={sortType} \n                      sortRow={sortRow} \n                      handleSort={this.handleSort} \n                      handleUserShow={this.handleUserShow}\n                    />\n                  </Col>\n                </>\n            }\n\n            {\n              searchAppliedData.length > PAGE_SIZE ?\n                <Col lg={12} md={12}>\n                  <ReactPaginate\n                    previousLabel={'<'}\n                    nextLabel={'>'}\n                    breakLabel={'...'}\n                    breakClassName={'break-me'}\n                    pageCount={pageCount}\n                    forcePage={currentPage}\n                    marginPagesDisplayed={2}\n                    pageRangeDisplayed={3}\n                    onPageChange={this.handlePageClick}\n                    containerClassName={'pagination justify-content-center'}\n                    activeClassName={'active'}\n                    pageClassName={'page-item'}\n                    pageLinkClassName={'page-link'}\n                    previousClassName={'page-item'}\n                    nextClassName={'page-item'}\n                    previousLinkClassName={'page-link'}\n                    nextLinkClassName={'page-link'}\n                  />\n                </Col>\n               :\n                null\n            }\n            {\n              choisedUser ?\n                <Col lg={12} md={12}>\n                  <UserInfo choisedUser={choisedUser} /> \n                </Col> \n              : \n                null\n            }\n        </Row>\n      </Container> \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}